const express = require('express');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
let messages = [];

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kaiten
const KAITEN_API_TOKEN = process.env.KAITEN_API_TOKEN;
const KAITEN_DOMAIN = process.env.KAITEN_DOMAIN; // –Ω–∞–ø—Ä–∏–º–µ—Ä: panna.kaiten.ru

// === API: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (task) –≤ Kaiten ===
app.post('/api/proxy/card', async (req, res) => {
  const { spaceId, title, boardId, columnId } = req.body;

  if (!KAITEN_API_TOKEN || !KAITEN_DOMAIN) {
    return res.status(500).json({ error: 'KAITEN_API_TOKEN –∏–ª–∏ KAITEN_DOMAIN –Ω–µ –∑–∞–¥–∞–Ω—ã' });
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –±–µ—Ä–µ–º boardId –∏ columnId –∏–∑ URL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
  const board_id = boardId || 1; // ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π boardId –∏–∑ —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏
  const column_id = columnId || 1; // ‚Üê –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞

  try {
    const kaitenRes = await fetch(`https://${KAITEN_DOMAIN}/api/latest/cards`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${KAITEN_API_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        title,
        board_id,
        column_id,
        asap: false, // –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
        due_date: null
      })
    });

    const data = await kaitenRes.json();
    res.status(kaitenRes.status).json(data);
  } catch (err) {
    console.error('Kaiten API error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Kaiten API' });
  }
});

// === –ß–∞—Ç API ===
app.post('/api/messages', (req, res) => {
  const { spaceId, text } = req.body;
  if (!spaceId || !text) {
    return res.status(400).json({ error: 'spaceId –∏ text –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  const msg = {
    id: uuidv4(),
    spaceId,
    text,
    isCommand: text.startsWith('/'),
    createdAt: new Date().toISOString()
  };
  messages.push(msg);
  res.json(msg);
});

app.get('/api/messages/:spaceId', (req, res) => {
  const { spaceId } = req.params;
  const spaceMessages = messages.filter(m => m.spaceId === spaceId);
  res.json(spaceMessages);
});

// –†–∞–∑–¥–∞—ë–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
app.use(express.static('../frontend'));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(__dirname + '/../frontend/index.html');
});

app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê Kaiten Domain: ${KAITEN_DOMAIN || '–Ω–µ –∑–∞–¥–∞–Ω'}`);
});
